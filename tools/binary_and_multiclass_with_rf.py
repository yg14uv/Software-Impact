# -*- coding: utf-8 -*-
"""Binary_and_Multiclass_with_RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8tITANtAEEAASByXSSHVVeKdrXrgJHN
"""

# Importing desired libraries
import pandas as pd


#loading dataset
df = pd.read_csv('IoTID20.csv')
df.head()

df_copy = df.drop(["Flow_ID","Src_IP","Dst_IP","Timestamp", "Cat","Sub_Cat","Label", "Flow_Byts/s", "Flow_Pkts/s"], axis=1)
df_copy.shape

features = df[df_copy.columns]
target = df[df.columns[-3]] 
print(features.shape)
print(target.shape)

target

from sklearn.preprocessing import StandardScaler, MinMaxScaler
minMax= MinMaxScaler()
features = minMax.fit_transform(features)
sc = StandardScaler()
features = sc.fit_transform(features)

# Training Model

from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=1)

print(X_train.shape) 
print(X_test.shape) 

print(y_train.shape) 
print(y_test.shape)

#Multi class classification 
features2 = features
target2 = df[df.columns[-1]] 
print(features2.shape)
print(target2.shape)

#Multi class classification 
features2 = features
target2 = df[df.columns[-1]] 
print(features2.shape)
print(target2.shape)

# Desision Trees
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

# Binary class Classification with decision trees
# We will use binary classification variables in this case i.e x_train, y_train etc
# Create Decision Tree classifer object
clf = DecisionTreeClassifier(max_depth=25)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred_tree = clf.predict(X_test)

# Model Accuracy
print("Accuracy Decision Tree Binary class classification:",metrics.accuracy_score(y_test, y_pred_tree)*100)

# For Multi Class Classification
X_train2, X_test2, y_train2, y_test2 = train_test_split(features2, target2, test_size=0.3, random_state=1)

# Multi class Classification with decision trees
# We will use multi class classification variables in this case i.e x_train2, y_train2 etc
# Create Decision Tree classifer object
clf = DecisionTreeClassifier(max_depth=18, max_features=74)

# Train Decision Tree Classifer
clf = clf.fit(X_train2,y_train2)

#Predict the response for test dataset
y_pred_tree2 = clf.predict(X_test2)

# Model Accuracy with multi class classification
print("Accuracy Decision Tree multi class classification:",metrics.accuracy_score(y_test2, y_pred_tree2)*100)

# creating a RF classifier
# Number of trees = 200
# 
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators = 20, max_features = 74) 
 
# Training the model on the training dataset
# fit function is used to train the model using the training sets as parameters
clf.fit(X_train, y_train)
 
# performing predictions on the test dataset
y_pred = clf.predict(X_test)
 
# metrics are used to find accuracy or error
from sklearn import metrics 
print()
 
# using metrics module for accuracy calculation
print("ACCURACY OF THE MODEL: ", metrics.accuracy_score(y_test, y_pred))

# creating a RF classifier
# Number of trees = 20
# Max Features = 74 our of 77
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators = 20, max_features = 74) 
 
# Training the model on the training dataset
# fit function is used to train the model using the training sets as parameters
clf.fit(X_train2, y_train2)
 
# performing predictions on the test dataset
y_pred = clf.predict(X_test2)
 
# metrics are used to find accuracy or error
from sklearn import metrics 
print()
 
# using metrics module for accuracy calculation
print("Accuracy of multi class classification of Random Forest: ", metrics.accuracy_score(y_test2, y_pred))
